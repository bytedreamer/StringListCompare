#pragma checksum "/Users/bytedreamer/Projects/StringListCompare/Pages/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "820ce9a5c6368170023af372cfb16fcc8bb6ac97"
// <auto-generated/>
#pragma warning disable 1591
namespace StringListCompare.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using StringListCompare;
    using StringListCompare.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "container");
            builder.AddContent(2, "\n    ");
            builder.AddMarkupContent(3, "<div class=\"row\">\n        <h1>String List Compare</h1>\n    </div>\n    ");
            builder.AddMarkupContent(4, "<div class=\"row\">\n        A simple online tool to compare a list of strings.\n    </div>\n    ");
            builder.OpenElement(5, "div");
            builder.AddAttribute(6, "class", "row string-list-input");
            builder.AddContent(7, "\n        ");
            builder.OpenElement(8, "div");
            builder.AddAttribute(9, "class", "container");
            builder.AddContent(10, "\n            ");
            builder.OpenElement(11, "div");
            builder.AddAttribute(12, "class", "row");
            builder.AddContent(13, "\n                ");
            builder.OpenElement(14, "div");
            builder.AddAttribute(15, "class", "col-sm align-content-center text-center");
            builder.AddContent(16, "\n                    ");
            builder.OpenElement(17, "textarea");
            builder.AddAttribute(18, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(_stringList1));
            builder.AddAttribute(19, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => _stringList1 = __value, _stringList1));
            builder.CloseElement();
            builder.AddContent(20, "\n                    ");
            builder.AddMarkupContent(21, "<h5>1st list of strings separated by new lines</h5>\n                ");
            builder.CloseElement();
            builder.AddContent(22, "\n                ");
            builder.OpenElement(23, "div");
            builder.AddAttribute(24, "class", "col-sm align-content-center text-center");
            builder.AddContent(25, "\n                    ");
            builder.OpenElement(26, "textarea");
            builder.AddAttribute(27, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(_stringList2));
            builder.AddAttribute(28, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => _stringList2 = __value, _stringList2));
            builder.CloseElement();
            builder.AddContent(29, "\n                    ");
            builder.AddMarkupContent(30, "<h5>2nd list of strings separated by new lines</h5>\n                ");
            builder.CloseElement();
            builder.AddContent(31, "\n            ");
            builder.CloseElement();
            builder.AddContent(32, "\n        ");
            builder.CloseElement();
            builder.AddContent(33, "\n    ");
            builder.CloseElement();
            builder.AddContent(34, "\n    ");
            builder.OpenElement(35, "div");
            builder.AddAttribute(36, "class", "row justify-content-center string-list-action");
            builder.AddContent(37, "\n        ");
            builder.OpenElement(38, "button");
            builder.AddAttribute(39, "type", "button");
            builder.AddAttribute(40, "class", "btn btn-primary");
            builder.AddAttribute(41, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(Compare));
            builder.AddContent(42, "Compare");
            builder.CloseElement();
            builder.AddContent(43, "\n    ");
            builder.CloseElement();
            builder.AddContent(44, "\n    ");
            builder.OpenElement(45, "div");
            builder.AddAttribute(46, "class", "row string-list-input");
            builder.AddContent(47, "\n        ");
            builder.OpenElement(48, "div");
            builder.AddAttribute(49, "class", "container");
            builder.AddContent(50, "\n            ");
            builder.OpenElement(51, "div");
            builder.AddAttribute(52, "class", "row");
            builder.AddContent(53, "\n                ");
            builder.OpenElement(54, "div");
            builder.AddAttribute(55, "class", "col-sm align-content-center text-center");
            builder.AddContent(56, "\n                    ");
            builder.OpenElement(57, "textarea");
            builder.AddAttribute(58, "readonly", true);
            builder.AddAttribute(59, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(_except1));
            builder.AddAttribute(60, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => _except1 = __value, _except1));
            builder.CloseElement();
            builder.AddContent(61, "\n                    ");
            builder.AddMarkupContent(62, "<h5>Strings found list 1 but not in list 2</h5>\n                ");
            builder.CloseElement();
            builder.AddContent(63, "\n                ");
            builder.OpenElement(64, "div");
            builder.AddAttribute(65, "class", "col-sm align-content-center text-center");
            builder.AddContent(66, "\n                    ");
            builder.OpenElement(67, "textarea");
            builder.AddAttribute(68, "readonly", true);
            builder.AddAttribute(69, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(_except2));
            builder.AddAttribute(70, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => _except2 = __value, _except2));
            builder.CloseElement();
            builder.AddContent(71, "\n                    ");
            builder.AddMarkupContent(72, "<h5>Strings found list 2 but not in list 1</h5>\n                ");
            builder.CloseElement();
            builder.AddContent(73, "\n            ");
            builder.CloseElement();
            builder.AddContent(74, "\n        ");
            builder.CloseElement();
            builder.AddContent(75, "\n    ");
            builder.CloseElement();
            builder.AddContent(76, "\n    ");
            builder.OpenElement(77, "div");
            builder.AddAttribute(78, "class", "row string-list-input");
            builder.AddContent(79, "\n        ");
            builder.OpenElement(80, "div");
            builder.AddAttribute(81, "class", "container");
            builder.AddContent(82, "\n            ");
            builder.OpenElement(83, "div");
            builder.AddAttribute(84, "class", "row");
            builder.AddContent(85, "\n                ");
            builder.OpenElement(86, "div");
            builder.AddAttribute(87, "class", "col-sm align-content-center text-center");
            builder.AddContent(88, "\n                    ");
            builder.OpenElement(89, "textarea");
            builder.AddAttribute(90, "readonly", true);
            builder.AddAttribute(91, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(_intersect));
            builder.AddAttribute(92, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => _intersect = __value, _intersect));
            builder.CloseElement();
            builder.AddContent(93, "\n                    ");
            builder.AddMarkupContent(94, "<h5>Strings found in list 1 and 2</h5>\n                ");
            builder.CloseElement();
            builder.AddContent(95, "\n                ");
            builder.OpenElement(96, "div");
            builder.AddAttribute(97, "class", "col-sm align-content-center text-center");
            builder.AddContent(98, "\n                    ");
            builder.OpenElement(99, "textarea");
            builder.AddAttribute(100, "readonly", true);
            builder.AddAttribute(101, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(_union));
            builder.AddAttribute(102, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => _union = __value, _union));
            builder.CloseElement();
            builder.AddContent(103, "\n                    ");
            builder.AddMarkupContent(104, "<h5>Combination of strings found in both list 1 and 2</h5>\n                ");
            builder.CloseElement();
            builder.AddContent(105, "\n            ");
            builder.CloseElement();
            builder.AddContent(106, "\n        ");
            builder.CloseElement();
            builder.AddContent(107, "\n    ");
            builder.CloseElement();
            builder.AddContent(108, "\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 57 "/Users/bytedreamer/Projects/StringListCompare/Pages/Index.cshtml"
            
    string _stringList1 = string.Empty, _stringList2 = string.Empty, _except1, _except2, _intersect, _union;

    void Compare(UIMouseEventArgs e)
    {
        string[] compareString1 = _stringList1.Split(new[] {Environment.NewLine}, StringSplitOptions.RemoveEmptyEntries);
        string[] compareString2 = _stringList2.Split(new[] {Environment.NewLine}, StringSplitOptions.RemoveEmptyEntries);

        _except1 = string.Join(Environment.NewLine, compareString1.Except(compareString2));
        _except2 = string.Join(Environment.NewLine, compareString2.Except(compareString1));
        _intersect = string.Join(Environment.NewLine, compareString1.Intersect(compareString2));
        _union = string.Join(Environment.NewLine, compareString1.Union(compareString2));
    }


#line default
#line hidden
    }
}
#pragma warning restore 1591
